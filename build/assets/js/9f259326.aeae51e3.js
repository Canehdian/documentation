"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[18],{9613:function(e,r,t){t.d(r,{Zo:function(){return m},kt:function(){return p}});var n=t(9496);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function u(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},m=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=l(t),p=a,h=c["".concat(s,".").concat(p)]||c[p]||d[p]||o;return t?n.createElement(h,i(i({ref:r},m),{},{components:t})):n.createElement(h,i({ref:r},m))}));function p(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var u={};for(var s in r)hasOwnProperty.call(r,s)&&(u[s]=r[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2756:function(e,r,t){t.r(r),t.d(r,{assets:function(){return m},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return d}});var n=t(2182),a=t(9028),o=(t(9496),t(9613)),i=["components"],u={},s="`{user}` tags",l={unversionedId:"Tags/user",id:"Tags/user",title:"`{user}` tags",description:"{user.mention;user}",source:"@site/docs/Tags/user.md",sourceDirName:"Tags",slug:"/Tags/user",permalink:"/Tags/user",editUrl:"https://github.com/sylo-digital/documentation/docs/Tags/user.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"`{store}` tags",permalink:"/Tags/store"}},m={},d=[{value:"<code>{user.mention;user}</code>",id:"usermentionuser",level:2},{value:"<code>{user.id;user}</code>",id:"useriduser",level:2},{value:"<code>{user.username;user}</code>",id:"userusernameuser",level:2},{value:"<code>{user.bot;user}</code>",id:"userbotuser",level:2},{value:"<code>{user.tag;user}</code>",id:"usertaguser",level:2},{value:"<code>{user.discriminator;user}</code>",id:"userdiscriminatoruser",level:2},{value:"<code>{user.avatar;user}</code>",id:"useravataruser",level:2},{value:"<code>{user.roles;member}</code>",id:"userrolesmember",level:2},{value:"<code>{user.nickname;member}</code>",id:"usernicknamemember",level:2},{value:"<code>{user.joinedAt;member}</code>",id:"userjoinedatmember",level:2},{value:"<code>{user.createdAt;user}</code>",id:"usercreatedatuser",level:2},{value:"<code>{user.edit nick mute deaf channel;member}</code>",id:"useredit-nick-mute-deaf-channelmember",level:2},{value:"Arguments",id:"arguments",level:4},{value:"<code>{user.addrole reason;role;member}</code>",id:"useraddrole-reasonrolemember",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"<code>{user.removerole reason;role;member}</code>",id:"userremoverole-reasonrolemember",level:2},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>{user.colour;member}</code>",id:"usercolourmember",level:2}],c={toc:d};function p(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"user-tags"},(0,o.kt)("inlineCode",{parentName:"h1"},"{user}")," tags"),(0,o.kt)("h2",{id:"usermentionuser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.mention;user}")),(0,o.kt)("p",null,"Returns a string with a user mention."),(0,o.kt)("h2",{id:"useriduser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.id;user}")),(0,o.kt)("p",null,"Returns the ID of a user."),(0,o.kt)("h2",{id:"userusernameuser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.username;user}")),(0,o.kt)("p",null,"Returns the username of a user."),(0,o.kt)("h2",{id:"userbotuser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.bot;user}")),(0,o.kt)("p",null,"Checks whether a user is a bot account."),(0,o.kt)("h2",{id:"usertaguser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.tag;user}")),(0,o.kt)("p",null,"Returns the tag of a user with the username and discriminator, for example ",(0,o.kt)("inlineCode",{parentName:"p"},"Grainus#0432"),"."),(0,o.kt)("h2",{id:"userdiscriminatoruser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.discriminator;user}")),(0,o.kt)("p",null,"Returns the discriminator of a user, which is the four digits at the end of the username."),(0,o.kt)("h2",{id:"useravataruser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.avatar;user}")),(0,o.kt)("p",null,"Returns the avatar URL of a user. Their server avatar will take priority if they have one."),(0,o.kt)("h2",{id:"userrolesmember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.roles;member}")),(0,o.kt)("p",null,"Returns an array of IDs for all the roles of a user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{choose;{user.roles}}  // A random role the user has\n")),(0,o.kt)("h2",{id:"usernicknamemember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.nickname;member}")),(0,o.kt)("p",null,"Returns the display name of a user. This will be their nickname if they have one set and their username otherwise."),(0,o.kt)("h2",{id:"userjoinedatmember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.joinedAt;member}")),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#description"},"timestamp")," for the join date of a user that can be used with ",(0,o.kt)("a",{parentName:"p",href:"https://documentation.atlas.bot/en/scripts/tags/global#time-formattime"},"{time}"),"."),(0,o.kt)("h2",{id:"usercreatedatuser"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.createdAt;user}")),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#description"},"timestamp")," for the creation date of a user's Discord account that can be used with ",(0,o.kt)("a",{parentName:"p",href:"https://documentation.atlas.bot/en/scripts/tags/global#time-formattime"},"{time}"),"."),(0,o.kt)("h2",{id:"useredit-nick-mute-deaf-channelmember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.edit nick mute deaf channel;member}")),(0,o.kt)("p",null,"Edits a user."),(0,o.kt)("h4",{id:"arguments"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nick"),": The user's new nickname. Leave empty to clear."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mute"),": Whether the user will be server muted in voice channels."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"deaf"),": Whether the user will be server deafened in voice channels."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"channel"),": The new channel to move the user to if they are in voice channel.")),(0,o.kt)("h2",{id:"useraddrole-reasonrolemember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.addrole reason;role;member}")),(0,o.kt)("p",null,"Gives a user a role."),(0,o.kt)("h4",{id:"arguments-1"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reason"),": The reason for the action that will be displayed in the Audit Log."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"role"),": The role to add to the user.")),(0,o.kt)("h2",{id:"userremoverole-reasonrolemember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.removerole reason;role;member}")),(0,o.kt)("p",null,"Removes a role from a user."),(0,o.kt)("h4",{id:"arguments-2"},"Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"reason"),": The reason for the action that will be displayed in the Audit Log."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"role"),": The role to remove from the user.")),(0,o.kt)("h2",{id:"usercolourmember"},(0,o.kt)("inlineCode",{parentName:"h2"},"{user.colour;member}")),(0,o.kt)("p",null,"Gets a user's color based on their highest role."))}p.isMDXComponent=!0}}]);
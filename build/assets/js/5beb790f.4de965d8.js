"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[726],{9613:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),c=o,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<a;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3611:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return m}});var r=n(2182),o=n(9028),a=(n(9496),n(9613)),l=["components"],i={},s="`{responder}` tags",d={unversionedId:"Tags/responder",id:"Tags/responder",title:"`{responder}` tags",description:"tags let you construct a message that will be sent once the action is over, or you manually send it. These tags are meant to be chained together to form a complete responder.",source:"@site/docs/Tags/responder.md",sourceDirName:"Tags",slug:"/Tags/responder",permalink:"/Tags/responder",editUrl:"https://github.com/sylo-digital/documentation/docs/Tags/responder.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"{message}",permalink:"/Tags/message"},next:{title:"`{role}` tags",permalink:"/Tags/role"}},p={},m=[{value:"<code>{responder.text;message}</code>",id:"respondertextmessage",level:2},{value:"<code>{responder.dm fallback=false;member}</code>",id:"responderdm-fallbackfalsemember",level:2},{value:"<code>{responder.embed}</code>",id:"responderembed",level:2},{value:"<code>{responder.embedField;name;value;inline}</code>",id:"responderembedfieldnamevalueinline",level:2},{value:"<code>{responder.channel;channel}</code>",id:"responderchannelchannel",level:2},{value:"<code>{responder.reset}</code>",id:"responderreset",level:2},{value:"<code>{responder.ephemeral}</code>",id:"responderephemeral",level:2},{value:"<code>{responder.error;message}</code>",id:"respondererrormessage",level:2},{value:"<code>{responder.send return_id=false}</code>",id:"respondersend-return_idfalse",level:2},{value:"<code>{responder.button label handler state url emoji style}</code>",id:"responderbutton-label-handler-state-url-emoji-style",level:2}],u={toc:m};function c(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"responder-tags"},(0,a.kt)("inlineCode",{parentName:"h1"},"{responder}")," tags"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{responder}")," tags let you construct a message that will be sent once the action is over, or you manually send it. These tags are meant to be chained together to form a complete responder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{responder.text;Hello!}\n{responder.embed title="World"}\n{responder.send}\n')),(0,a.kt)("h2",{id:"respondertextmessage"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.text;message}")),(0,a.kt)("p",null,"Appends text to the output message. If there is more text, it will be appended to the existing text."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{responder.text;Hello World}"),' will make the output message "Hello World"\n',(0,a.kt)("inlineCode",{parentName:"p"},"{responder.text;Hello}{responder.text;World}"),' will make the output message "Hello World"\n',(0,a.kt)("inlineCode",{parentName:"p"},"{responder.text;Hello}{responder.text;}")," empty text will clear existing text."),(0,a.kt)("h2",{id:"responderdm-fallbackfalsemember"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.dm fallback=false;member}")),(0,a.kt)("p",null,"Set the responder to dm a user. This tag can be hit and miss if the user has their direct-messages closed."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"{responder.dm;{user.id}}")," will make the message direct-message the user in context.\n",(0,a.kt)("inlineCode",{parentName:"p"},"{responder.dm fallback=true;{user.id}}")," will send a message to the user and will fall back to the context channel if the user has their direct-mesage closed."),(0,a.kt)("h2",{id:"responderembed"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.embed}")),(0,a.kt)("p",null,"This tag is used to add embeds to the message. Calling it multiple times will add multiple embeds to the message, up to a maximum of 10."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'{responder.embed title="Hello world"}'),"\n",(0,a.kt)("inlineCode",{parentName:"p"},'{responder.embed title=Test timestamp="5 hours ago"}')),(0,a.kt)("p",null,"Embed Elements\n",(0,a.kt)("inlineCode",{parentName:"p"},"author-image"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"author-name"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"author-url"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"color"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"description"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"footer"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"footer-icon"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"timestamp"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"title"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"url")),(0,a.kt)("p",null,"Use the ",(0,a.kt)("a",{parentName:"p",href:"https://staging.atlas.bot/tools/embed-builder"},"Embed Builder")," to quickly build an embed."),(0,a.kt)("h2",{id:"responderembedfieldnamevalueinline"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.embedField;name;value;inline}")),(0,a.kt)("p",null,"Add a field to the last created embed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{responder.embed title="My Embed" description="Fortnite or something idk"}\n{responder.embedField name="My Field" value="very cool" inline=true}\n{responder.embedField name="Another One" value="even cooler" inline=true}\n')),(0,a.kt)("h2",{id:"responderchannelchannel"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.channel;channel}")),(0,a.kt)("p",null,"Set the channel the message will be sent to. THe channel must support sending messages."),(0,a.kt)("h2",{id:"responderreset"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.reset}")),(0,a.kt)("p",null,"Reset any options already applied to the responder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"{responder.text;Hello}\n{responder.reset}\n{responder.text;Something bad happened!}\n")),(0,a.kt)("p",null,'This would output "Something bad happened!"'),(0,a.kt)("h2",{id:"responderephemeral"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.ephemeral}")),(0,a.kt)("p",null,"Mark the message as ephemeral. Only works with interactions."),(0,a.kt)("h2",{id:"respondererrormessage"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.error;message}")),(0,a.kt)("p",null,"This is the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"{responder.text}"),", with some extras;"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Embeds will be set to red"),(0,a.kt)("li",{parentName:"ul"},"The message will be set to ephemeral")),(0,a.kt)("p",null,"You should use this whenever sending error messages."),(0,a.kt)("h2",{id:"respondersend-return_idfalse"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.send return_id=false}")),(0,a.kt)("p",null,"Send the message immediately. This will automatically call ",(0,a.kt)("inlineCode",{parentName:"p"},"{responder.reset}")," if the message is sent successfully. ",(0,a.kt)("inlineCode",{parentName:"p"},"return_id")," can be used to get the output message ID. Calling this is optional, once execution is over and there is a configured responder it will be sent automatically."),(0,a.kt)("h2",{id:"responderbutton-label-handler-state-url-emoji-style"},(0,a.kt)("inlineCode",{parentName:"h2"},"{responder.button label handler state url emoji style}")),(0,a.kt)("p",null,"Add a button to the message."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"label")," is the button text.\n",(0,a.kt)("inlineCode",{parentName:"p"},"handler")," is the value of the component callback action to call when the button is clicked\n",(0,a.kt)("inlineCode",{parentName:"p"},"state")," is an optional payload that will be accessible in the component callback action\n",(0,a.kt)("inlineCode",{parentName:"p"},"url")," can be used to link to external resources\n",(0,a.kt)("inlineCode",{parentName:"p"},"emoji")," is the name of an emoji to add to the button. Can be a guild emoji or a native emoji.\n",(0,a.kt)("inlineCode",{parentName:"p"},"style")," can change the ",(0,a.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/message-components#button-object-button-styles"},"button style"),", which defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"Primary"),". This will be ignored if ",(0,a.kt)("inlineCode",{parentName:"p"},"url")," is present."))}c.isMDXComponent=!0}}]);
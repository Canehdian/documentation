"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[986],{9613:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return p}});var n=t(9496);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),d=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=d(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=d(t),p=a,v=h["".concat(l,".").concat(p)]||h[p]||u[p]||s;return t?n.createElement(v,i(i({ref:r},c),{},{components:t})):n.createElement(v,i({ref:r},c))}));function p(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=h;var o={};for(var l in r)hasOwnProperty.call(r,l)&&(o[l]=r[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<s;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8595:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var n=t(2182),a=t(9028),s=(t(9496),t(9613)),i=["components"],o={},l="{server}",d={unversionedId:"Tags/server",id:"Tags/server",title:"{server}",description:"This was previously named . All {server} tags have a {guild} alias for backwards compatibility. {server.id} is the same as {guild.id}.",source:"@site/docs/Tags/server.md",sourceDirName:"Tags",slug:"/Tags/server",permalink:"/Tags/server",editUrl:"https://github.com/sylo-digital/documentation/docs/Tags/server.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"`{role}` tags",permalink:"/Tags/role"},next:{title:"`{store}` tags",permalink:"/Tags/store"}},c={},u=[{value:"<code>{server.id}</code>",id:"serverid",level:2},{value:"<code>{server.name}</code>",id:"servername",level:2},{value:"<code>{server.icon;size;hash}</code>",id:"servericonsizehash",level:2},{value:"Arguments",id:"arguments",level:4},{value:"<code>{server.splash;size;hash}</code>",id:"serversplashsizehash",level:2},{value:"Arguments",id:"arguments-1",level:4},{value:"<code>{server.banner;size;splash}</code>",id:"serverbannersizesplash",level:2},{value:"Arguments",id:"arguments-2",level:4},{value:"<code>{server.channels}</code>",id:"serverchannels",level:2},{value:"<code>{server.roles}</code>",id:"serverroles",level:2},{value:"<code>{server.shardId}</code>",id:"servershardid",level:2},{value:"<code>{server.ownerId}</code>",id:"serverownerid",level:2},{value:"<code>{server.memberCount}</code>",id:"servermembercount",level:2},{value:"<code>{server.createdAt}</code>",id:"servercreatedat",level:2}],h={toc:u};function p(e){var r=e.components,t=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},h,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"server"},(0,s.kt)("inlineCode",{parentName:"h1"},"{server}")),(0,s.kt)("p",null,"This was previously named ",(0,s.kt)("inlineCode",{parentName:"p"},"{guild}"),". All ",(0,s.kt)("inlineCode",{parentName:"p"},"{server}")," tags have a ",(0,s.kt)("inlineCode",{parentName:"p"},"{guild}")," alias for backwards compatibility. ",(0,s.kt)("inlineCode",{parentName:"p"},"{server.id}")," is the same as ",(0,s.kt)("inlineCode",{parentName:"p"},"{guild.id}"),"."),(0,s.kt)("h2",{id:"serverid"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.id}")),(0,s.kt)("p",null,"Returns the ID of the server."),(0,s.kt)("h2",{id:"servername"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.name}")),(0,s.kt)("p",null,"Returns the name of the server."),(0,s.kt)("h2",{id:"servericonsizehash"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.icon;size;hash}")),(0,s.kt)("p",null,"Gets the icon of the server."),(0,s.kt)("h4",{id:"arguments"},"Arguments"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"size"),": The size of the image to get. Must be a valid ",(0,s.kt)("a",{parentName:"li",href:"https://discord.com/developers/docs/reference#image-formatting"},"CDN size"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hash"),": Whether to return the hash directly instead of a URL.")),(0,s.kt)("h2",{id:"serversplashsizehash"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.splash;size;hash}")),(0,s.kt)("p",null,"Gets the splash image of the server."),(0,s.kt)("h4",{id:"arguments-1"},"Arguments"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"size"),": The size of the splash to get. Must be a valid ",(0,s.kt)("a",{parentName:"li",href:"https://discord.com/developers/docs/reference#image-formatting"},"CDN size"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hash"),": Whether to return the hash directly instead of a URL.")),(0,s.kt)("h2",{id:"serverbannersizesplash"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.banner;size;splash}")),(0,s.kt)("p",null,"Gets the banner of the server."),(0,s.kt)("h4",{id:"arguments-2"},"Arguments"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"size"),": The size of the banner to get. Must be a valid ",(0,s.kt)("a",{parentName:"li",href:"https://discord.com/developers/docs/reference#image-formatting"},"CDN size"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hash"),": Whether to return the hash directly instead of a URL.")),(0,s.kt)("h2",{id:"serverchannels"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.channels}")),(0,s.kt)("p",null,"Returns an array of IDs for all channels in the server."),(0,s.kt)("h2",{id:"serverroles"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.roles}")),(0,s.kt)("p",null,"Returns an array of IDs for all roles in the server."),(0,s.kt)("h2",{id:"servershardid"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.shardId}")),(0,s.kt)("p",null,"Returns the ID of the shard the bot is running on in the server."),(0,s.kt)("h2",{id:"serverownerid"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.ownerId}")),(0,s.kt)("p",null,"Returns the ID of the server owner."),(0,s.kt)("h2",{id:"servermembercount"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.memberCount}")),(0,s.kt)("p",null,"Returns the total count of members in the server. This should be almost exactly accurate and is not subject to caching issues."),(0,s.kt)("h2",{id:"servercreatedat"},(0,s.kt)("inlineCode",{parentName:"h2"},"{server.createdAt}")),(0,s.kt)("p",null,"Returns a ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#description"},"timestamp")," for the creation date of a server that can be used with ",(0,s.kt)("a",{parentName:"p",href:"https://documentation.atlas.bot/en/scripts/tags/global#time-formattime"},"{time}"),"."))}p.isMDXComponent=!0}}]);
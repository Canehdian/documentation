"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[459],{9613:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||p[m]||s;return r?n.createElement(y,o(o({ref:t},c),{},{components:r})):n.createElement(y,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9988:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var n=r(2182),a=r(9028),s=(r(9496),r(9613)),o=["components"],i={},l="Variables",u={unversionedId:"Scripts/variables",id:"Scripts/variables",title:"Variables",description:"Variables let you store values for later use.",source:"@site/docs/Scripts/variables.md",sourceDirName:"Scripts",slug:"/Scripts/variables",permalink:"/Scripts/variables",editUrl:"https://github.com/sylo-digital/documentation/docs/Scripts/variables.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Scopes",permalink:"/Scripts/scopes"},next:{title:"Suggestion tags",permalink:"/Tags/Plugins/suggestion"}},c={},p=[{value:"Arrays",id:"arrays",level:2},{value:"Finding array items",id:"finding-array-items",level:3}],d={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"variables"},"Variables"),(0,s.kt)("p",null,"Variables let you store values for later use."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=my_variable;hello}\n{$my_variable} // "hello"\n')),(0,s.kt)("p",null,"Variables support nested keys, which can be used to store values in a more complex structure."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=user.level;0}\n{=user.name;John}\n{$user.level} // get the "level" property of the "user" variable, 0\n{$user} // get the "user" variable, in this case an object matching { level: 0, name: "John" }\n')),(0,s.kt)("p",null,"Variable names can also be dynamic"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{=id;{user.id}} // 111372124383428608, a definitely real user ID\n{=users.{$id}.balance;100}\n{$users} // { 111372124383428608: { balance: 100 } }\n")),(0,s.kt)("h2",{id:"arrays"},"Arrays"),(0,s.kt)("p",null,"You can create and update arrays."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=target;{[one;two;three]}}\n{$target} // {[one;two;three]}\n// Arrays are zero-indexed\n{$target.0} // get the first item in the array, "one"\n{$target.1} // get the second item in the array, "two"\n')),(0,s.kt)("h3",{id:"finding-array-items"},"Finding array items"),(0,s.kt)("p",null,"When using objects with arrays, you can use special syntax to find elements of an array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=data;{{\n    "myarray": [{\n        "id": 1,\n        "name": "Rocinante"\n    }, {\n        "id": 2,\n        "name": "Pella"\n    }]\n}}}\n\n// The format is [key:value], where key is the name of the key to retrieve and value is the value to match against.\n{$data.myarray.[id:2].name} // "Pella"\n')),(0,s.kt)("h1",{id:"persisting-variables"},"Persisting Variables"),(0,s.kt)("p",null,"By using the ",(0,s.kt)("inlineCode",{parentName:"p"},"{store}")," tag you can store data to use at a later date."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{store.set;key;value}\n{store.get;key;value} // "value"\n')),(0,s.kt)("p",null,"You can persist objects and arrays. There are limits on how many items can be stored and how much data can be stored per key."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=user.id;1}\n{=user.level;0}\n{=user.balance;100}\n{store.set;user;{$user}} // Store the {$user} variable at the "user" key\n\n// Some time later...\n{=user;{store.get;user}}\n{$user.id} // 1\n{$user.level} // 0\n{$user.balance} // 100\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"{store}")," tags do not understand nested keys, so you can't retrieve partial information with them."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{=user.id;1}\n{store.set;user;{$user}}\n{store.get;user.id} // This will return nothing because it looks up the "user.id" key, not the "user" key.\n\n// This works the other way around\n{store.set;user.id;1}\n{store.get;user} // Prints nothing because it looks up the "user" key while our data is stored at the "user.id" key.\n')),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://documentation.atlas.bot/en/scripts/tags/store"},"{store}")," for information."))}m.isMDXComponent=!0}}]);